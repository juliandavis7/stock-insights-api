# Code Generated by Sidekick is for learning and experimentation purposes only.
from fastapi import FastAPI, HTTPException, Query, Depends
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Dict
import httpx
import logging
from models import MetricsResponse, ProjectionRequest, ProjectionResponse, ProjectionBaseDataResponse, ErrorResponse, FinancialStatementResponse, FinancialDataResponse, AnalystEstimateResponse, ComprehensiveFinancialResponse
from util import get_metrics, fetch_fmp_analyst_estimates, extract_metric_by_year, calculate_financial_projections, validate_projection_inputs, fetch_chart_data, fetch_enhanced_chart_data
from services.projection_service import ProjectionService
from services.yfinance_service import YFinanceService
from constants.constants import FMP_API_KEY
from auth import verify_token

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('api.log')
    ]
)

app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://127.0.0.1:5173"],  # React frontend
    allow_credentials=True,
    allow_methods=["GET", "POST"],  # Only allow necessary methods
    allow_headers=["Content-Type", "Authorization"],  # Restrict headers
)

@app.on_event("startup")
async def startup_event():
    import os
    environment = os.getenv('ENVIRONMENT', 'production').lower()
    logging.info("🚀 Stock Insights API started with enhanced logging")
    logging.info("📊 Debug logs will be visible for current year growth calculations")
    if environment == 'local':
        logging.warning("⚠️  Running in LOCAL mode - Authentication is BYPASSED")
    else:
        logging.info(f"🔒 Running in {environment.upper()} mode - Authentication is REQUIRED")


@app.get("/health")
def health_check():
    return {"status": "ok"}

@app.get("/metrics", response_model=MetricsResponse)
def metrics(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    try:
        data = get_metrics(ticker)
        return data
    except Exception as e:
        logging.error(f"❌ API: Error in metrics endpoint for {ticker}: {e}")
        import traceback
        logging.error(f"❌ API: Full traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Error calculating metrics: {str(e)}")

@app.get("/revenue")
def get_revenue(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    revenue_dict = extract_metric_by_year(fmp_data, "estimatedRevenueAvg")
    return revenue_dict

# Code Generated by Sidekick is for learning and experimentation purposes only.
@app.get("/net-income")
def get_net_income(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    net_income_dict = extract_metric_by_year(fmp_data, "estimatedNetIncomeAvg")
    return net_income_dict

@app.get("/eps")
def get_eps(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    fmp_data = fetch_fmp_analyst_estimates(ticker)
    if not fmp_data:
        raise HTTPException(status_code=404, detail="No data found for ticker")
    eps_dict = extract_metric_by_year(fmp_data, "estimatedEpsAvg")
    return eps_dict

@app.post("/projections", response_model=ProjectionResponse)
async def create_financial_projections(
    request: ProjectionRequest,
    ticker: str = Query(..., description="Stock ticker symbol (e.g., AAPL)", regex="^[A-Z]{1,5}$"),
    user: Dict = Depends(verify_token)
):
    """
    Calculate financial projections for a stock based on user assumptions.
    
    Args:
        ticker: Stock ticker symbol as query parameter
        request: Projection inputs in request body
    
    Returns:
        Financial projections including revenue, net income, EPS, stock price ranges, and CAGR
    """
    # Convert Pydantic models to dictionary format expected by utils
    projection_inputs = {}
    for year, projection in request.projections.items():
        projection_inputs[year] = {
            'revenue_growth': projection.revenue_growth,
            'net_income_growth': projection.net_income_growth,
            'net_income_margin': projection.net_income_margin,
            'pe_low': projection.pe_low,
            'pe_high': projection.pe_high
        }
    
    # Validate inputs using utility function
    validation_errors = validate_projection_inputs(projection_inputs)
    if validation_errors:
        raise HTTPException(
            status_code=400, 
            detail={
                "error": "Validation failed",
                "details": validation_errors
            }
        )
    
    # Calculate projections
    try:
        result = calculate_financial_projections(
            ticker=ticker.upper(),
            api_key=FMP_API_KEY,
            projection_inputs=projection_inputs
        )
        
        if not result.get('success', True):
            raise HTTPException(
                status_code=400,
                detail={
                    "error": result.get('error', 'Unknown error occurred'),
                    "ticker": ticker
                }
            )
        
        return ProjectionResponse(**result)
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={
                "error": f"Internal server error: {str(e)}",
                "ticker": ticker
            }
        )


@app.get("/projections", response_model=ProjectionBaseDataResponse)
def get_projection_base_data(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    """
    Get base data for financial projections including current stock metrics.
    
    Args:
        ticker: Stock ticker symbol (e.g., CELH, AAPL)
        
    Returns:
        Base data including price, market cap, shares outstanding, and financial metrics
    """
    try:
        projection_service = ProjectionService()
        data = projection_service.get_stock_current_data(ticker.upper(), FMP_API_KEY)
        
        if not data:
            raise HTTPException(
                status_code=404,
                detail={
                    "error": f"Unable to fetch data for ticker {ticker}",
                    "ticker": ticker.upper()
                }
            )
        
        # Calculate net income margin if we have both net income and revenue
        net_income_margin = None
        if data.get('net_income') and data.get('revenue') and data['revenue'] > 0:
            net_income_margin = round((data['net_income'] / data['revenue']) * 100, 2)
        
        return ProjectionBaseDataResponse(
            ticker=data['ticker'],
            # Stock info fields removed - use /info endpoint instead
            revenue=data.get('revenue'),
            net_income=data.get('net_income'),
            eps=data.get('current_year_eps'),
            net_income_margin=net_income_margin,
            data_year=data['data_year']
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={
                "error": f"Internal server error: {str(e)}",
                "ticker": ticker.upper()
            }
        )


@app.get("/mock-income-statement", response_model=List[FinancialStatementResponse])
def get_financial_statements(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    """
    Mock endpoint to return hardcoded financial statement data for development.
    Returns 3 years of mock data (2024, 2023, 2022) similar to FMP API response.
    
    Args:
        ticker: Stock ticker symbol (e.g., AAPL)
        
    Returns:
        List of financial statement data for the past 3 years
    """
    # Mock financial data for different tickers
    mock_data = {
        "AAPL": [
            {
                "date": "2024-09-28",
                "symbol": "AAPL",
                "reportedCurrency": "USD",
                "cik": "0000320193",
                "filingDate": "2024-11-01",
                "acceptedDate": "2024-11-01 06:01:36",
                "fiscalYear": "2024",
                "period": "FY",
                "revenue": 391035000000,
                "costOfRevenue": 210352000000,
                "grossProfit": 180683000000,
                "researchAndDevelopmentExpenses": 31370000000,
                "generalAndAdministrativeExpenses": 0,
                "sellingAndMarketingExpenses": 0,
                "sellingGeneralAndAdministrativeExpenses": 26097000000,
                "otherExpenses": 0,
                "operatingExpenses": 57467000000,
                "costAndExpenses": 267819000000,
                "netInterestIncome": 0,
                "interestIncome": 0,
                "interestExpense": 0,
                "depreciationAndAmortization": 11445000000,
                "ebitda": 134661000000,
                "ebit": 123216000000,
                "nonOperatingIncomeExcludingInterest": 0,
                "operatingIncome": 123216000000,
                "totalOtherIncomeExpensesNet": 269000000,
                "incomeBeforeTax": 123485000000,
                "incomeTaxExpense": 29749000000,
                "netIncomeFromContinuingOperations": 93736000000,
                "netIncomeFromDiscontinuedOperations": 0,
                "otherAdjustmentsToNetIncome": 0,
                "netIncome": 93736000000,
                "netIncomeDeductions": 0,
                "bottomLineNetIncome": 93736000000,
                "eps": 6.11,
                "epsDiluted": 6.08,
                "weightedAverageShsOut": 15343783000,
                "weightedAverageShsOutDil": 15408095000
            },
            {
                "date": "2023-09-30",
                "symbol": "AAPL",
                "reportedCurrency": "USD",
                "cik": "0000320193",
                "filingDate": "2023-11-03",
                "acceptedDate": "2023-11-03 06:01:25",
                "fiscalYear": "2023",
                "period": "FY",
                "revenue": 383285000000,
                "costOfRevenue": 214137000000,
                "grossProfit": 169148000000,
                "researchAndDevelopmentExpenses": 29915000000,
                "generalAndAdministrativeExpenses": 0,
                "sellingAndMarketingExpenses": 0,
                "sellingGeneralAndAdministrativeExpenses": 24932000000,
                "otherExpenses": 0,
                "operatingExpenses": 54847000000,
                "costAndExpenses": 268984000000,
                "netInterestIncome": 0,
                "interestIncome": 0,
                "interestExpense": 0,
                "depreciationAndAmortization": 11519000000,
                "ebitda": 125820000000,
                "ebit": 114301000000,
                "nonOperatingIncomeExcludingInterest": 0,
                "operatingIncome": 114301000000,
                "totalOtherIncomeExpensesNet": -565000000,
                "incomeBeforeTax": 113736000000,
                "incomeTaxExpense": 16741000000,
                "netIncomeFromContinuingOperations": 96995000000,
                "netIncomeFromDiscontinuedOperations": 0,
                "otherAdjustmentsToNetIncome": 0,
                "netIncome": 96995000000,
                "netIncomeDeductions": 0,
                "bottomLineNetIncome": 96995000000,
                "eps": 6.16,
                "epsDiluted": 6.13,
                "weightedAverageShsOut": 15744231000,
                "weightedAverageShsOutDil": 15812547000
            },
            {
                "date": "2022-09-24",
                "symbol": "AAPL",
                "reportedCurrency": "USD",
                "cik": "0000320193",
                "filingDate": "2022-10-28",
                "acceptedDate": "2022-10-28 06:01:15",
                "fiscalYear": "2022",
                "period": "FY",
                "revenue": 394328000000,
                "costOfRevenue": 223546000000,
                "grossProfit": 170782000000,
                "researchAndDevelopmentExpenses": 26251000000,
                "generalAndAdministrativeExpenses": 0,
                "sellingAndMarketingExpenses": 0,
                "sellingGeneralAndAdministrativeExpenses": 25094000000,
                "otherExpenses": 0,
                "operatingExpenses": 51345000000,
                "costAndExpenses": 274891000000,
                "netInterestIncome": 0,
                "interestIncome": 0,
                "interestExpense": 0,
                "depreciationAndAmortization": 11104000000,
                "ebitda": 130541000000,
                "ebit": 119437000000,
                "nonOperatingIncomeExcludingInterest": 0,
                "operatingIncome": 119437000000,
                "totalOtherIncomeExpensesNet": -334000000,
                "incomeBeforeTax": 119103000000,
                "incomeTaxExpense": 19300000000,
                "netIncomeFromContinuingOperations": 99803000000,
                "netIncomeFromDiscontinuedOperations": 0,
                "otherAdjustmentsToNetIncome": 0,
                "netIncome": 99803000000,
                "netIncomeDeductions": 0,
                "bottomLineNetIncome": 99803000000,
                "eps": 6.15,
                "epsDiluted": 6.11,
                "weightedAverageShsOut": 16215963000,
                "weightedAverageShsOutDil": 16325819000
            }
        ]
    }
    
    ticker_upper = ticker.upper()
    
    # Return AAPL data for any ticker (for development purposes)
    # In a real implementation, you would have different mock data for different tickers
    if ticker_upper in mock_data:
        return mock_data[ticker_upper]
    else:
        # Return AAPL data as default for any unknown ticker
        return mock_data["AAPL"]


@app.get("/financials", response_model=ComprehensiveFinancialResponse)
def get_financials(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    """
    Get comprehensive financial data including historical data and analyst estimates.
    Returns structured financial data with key metrics for each year plus future estimates.
    
    Args:
        ticker: Stock ticker symbol (e.g., AAPL)
        
    Returns:
        Comprehensive financial data including historical and analyst estimates
    """
    try:
        yfinance_service = YFinanceService()
        financial_data = yfinance_service.get_annual_income_statement(ticker.upper())
        
        if not financial_data:
            raise HTTPException(
                status_code=404,
                detail=f"No financial data available for ticker {ticker}"
            )
        
        # Stock info removed - use /info endpoint instead
        
        # Convert historical data to FinancialDataResponse objects
        historical_data = []
        
        for year_data in financial_data:
            processed_year = FinancialDataResponse(
                fiscalYear=year_data.get("fiscalYear"),
                totalRevenue=year_data.get("totalRevenue"),
                costOfRevenue=year_data.get("costOfRevenue"),
                grossProfit=year_data.get("grossProfit"),
                sellingGeneralAndAdministrative=year_data.get("sellingGeneralAndAdministrative"),
                researchAndDevelopment=year_data.get("researchAndDevelopment"),
                operatingExpenses=year_data.get("operatingExpenses"),
                operatingIncome=year_data.get("operatingIncome"),
                netIncome=year_data.get("netIncome"),
                eps=year_data.get("eps"),
                dilutedEps=year_data.get("dilutedEps")
            )
            historical_data.append(processed_year)
        
        # Generate mock analyst estimates for 2025-2027
        # Get latest year's data as baseline for growth projections
        latest_year_data = financial_data[0] if financial_data else {}
        base_revenue = latest_year_data.get("totalRevenue", 100000000000)  # Default 100B
        base_net_income = latest_year_data.get("netIncome", 10000000000)   # Default 10B
        base_eps = latest_year_data.get("eps", 5.0)                       # Default 5.0
        base_diluted_eps = latest_year_data.get("dilutedEps", 4.95)       # Default 4.95
        
        # Mock analyst estimates with realistic growth assumptions
        estimates_data = []
        growth_rates = [0.08, 0.12, 0.10]  # 8%, 12%, 10% growth for 2025, 2026, 2027
        
        for i, year in enumerate([2025, 2026, 2027]):
            cumulative_growth = 1
            for j in range(i + 1):
                cumulative_growth *= (1 + growth_rates[j])
            
            estimate = AnalystEstimateResponse(
                fiscalYear=str(year),
                totalRevenue=int(base_revenue * cumulative_growth) if base_revenue else None,
                netIncome=int(base_net_income * cumulative_growth) if base_net_income else None,
                eps=round(base_eps * cumulative_growth, 2) if base_eps else None,
                dilutedEps=round(base_diluted_eps * cumulative_growth, 2) if base_diluted_eps else None
            )
            estimates_data.append(estimate)
        
        return ComprehensiveFinancialResponse(
            ticker=ticker.upper(),
            # Stock info fields removed - use /info endpoint instead
            historical=historical_data,
            estimates=estimates_data
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )


@app.get("/info")
def get_info(ticker: str = Query(..., description="Stock ticker symbol"), user: Dict = Depends(verify_token)):
    """
    Get basic stock information including price, market cap, and shares outstanding.
    
    Args:
        ticker: Stock ticker symbol (e.g., AAPL)
        
    Returns:
        JSON with ticker, price, market_cap, and shares_outstanding
    """
    try:
        yfinance_service = YFinanceService()
        
        # Get current price
        current_price = yfinance_service.get_current_price(ticker.upper())
        if current_price is None:
            raise HTTPException(
                status_code=404,
                detail=f"Unable to fetch price data for ticker {ticker}"
            )
        
        # Get market cap
        market_cap = yfinance_service.get_market_cap(ticker.upper())
        
        # Get shares outstanding
        shares_outstanding = yfinance_service.get_shares_outstanding(ticker.upper())
        
        return {
            "ticker": ticker.upper(),
            "price": current_price,
            "market_cap": int(market_cap) if market_cap else None,
            "shares_outstanding": int(shares_outstanding) if shares_outstanding else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={
                "error": f"Internal server error: {str(e)}",
                "ticker": ticker.upper()
            }
        )


@app.get("/charts")
def get_chart_revenue(
    ticker: str = Query(..., description="Stock ticker symbol"),
    mode: str = Query("quarterly", description="Mode: 'quarterly' for quarterly data or 'ttm' for trailing twelve months"),
    user: Dict = Depends(verify_token)
):
    """
    Get quarterly revenue and EPS chart data for a ticker, including current price and market cap.
    Returns chart data with quarterly data plus current stock info.
    
    Args:
        ticker: Stock ticker symbol (e.g., AAPL)
        mode: Data mode - "quarterly" for quarterly data or "ttm" for trailing twelve months data
        
    Returns:
        Chart data with ticker, quarters, revenue, eps, price, and market_cap
    """
    try:
        chart_data = fetch_enhanced_chart_data(ticker.upper(), mode=mode)
        
        if chart_data is None:
            raise HTTPException(
                status_code=404,
                detail={
                    "error": f"Unable to fetch chart data for ticker {ticker}",
                    "ticker": ticker.upper()
                }
            )
        
        # Stock info removed - use /info endpoint instead
        
        # Return the chart data without redundant stock info
        return {
            'ticker': chart_data['ticker'],
            'quarters': chart_data['quarters'],
            'revenue': chart_data['revenue'],
            'eps': chart_data['eps'],
            'gross_margin': chart_data['gross_margin'],
            'net_margin': chart_data['net_margin'],
            'operating_income': chart_data['operating_income'],
            'operating_cash_flow': chart_data['operating_cash_flow'],
            'free_cash_flow': chart_data['free_cash_flow']
            # Stock info fields removed - use /info endpoint instead
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail={
                "error": f"Internal server error: {str(e)}",
                "ticker": ticker.upper()
            }
        )
